prompt: "Please, answer the following questions"
questions:
  -
    input_type: select
    allow_many: false
    question:
      text: "How many logical buckets Git uses to keep track of the state of your files?"
    options:
      - '2'
      - '4'
      - '6'
      - '8'
    correct_options:
      - 3
  -
    input_type: select
    allow_many: false
    question:
      text: "How does Git call the files that does not keep track of?"
    options:
      - 'Ignored files'
      - 'Skipped files'
      - 'Untraced files'
      - 'Untracked files'
    correct_options:
      - 4
  -
    input_type: text
    question:
      text: "How are we going to put an untracked file into the Git index bucket? Assume that the file is `foo.txt`"
    correct_answers:
      - "git add foo.txt"
  -
    input_type: select
    allow_many: false
    question:
      text: "Which is another name for the index bucket?"
    options:
      - 'Indexing bucket'
      - 'Staging bucket'
      - 'Added files bucket'
      - 'Pre-commit bucket'
    correct_options:
      - 2
  -
    input_type: select
    allow_many: false
    question:
      text: "What is the purpose of the index bucket?"
    options:
      - 'To keep track of the changes that are to be ignored.'
      - 'To keep track of the changes that are going to stash.'
      - 'To keep track of the changes that are going to be staged.'
      - 'To keep track of the changes that are ready to be committed.'
    correct_options:
      - 4
  -
    input_type: select
    allow_many: false
    question:
      text: "If I have 5 files changed in my working directory but I only want to create a commit with the 2 of them, what do I have to do?"
    options:
      - 'I have to put the other 3 into the ignore bucket and create a commit with the other 2.'
      - 'I have to put the 2 files into the staging bucket and create a commit with these 2 files.'
      - 'I have to put the 3 files into the untracked bucket and then create a commit with the 2 files.'
      - 'I have to temporarily delete the 3 files, then create a commit with the 2 files and then undo the deletion of the 3 ones.'
    correct_options:
      - 2
  -
    input_type: text
    question:
      text: "Assuming that you have the following output of the `git status` command, which files and/or folders will be included in the next commit?"
      extra_text: |
        ~~~ruby
        On branch master

        Initial commit

        Changes to be committed:
          (use "git rm --cached <file>..." to unstage)

                new file:   index.html
                new file:   foo.txt
                new file:   maria.txt

        Untracked files:
          (use "git add <file>..." to include in what will be committed)

                .idea/
                john.txt
        ~~~
    correct_answers:
      - 'index.html, foo.txt, maria.txt'
  -
    input_type: text
    question:
      text: "Assuming that you have the following output. How do I put file `maria.txt` back into the untracked bucket?"
      extra_text: |
        ~~~ruby
        On branch master

        Initial commit

        Changes to be committed:
          (use "git rm --cached <file>..." to unstage)

                new file:   index.html
                new file:   foo.txt
                new file:   maria.txt

        Untracked files:
          (use "git add <file>..." to include in what will be committed)

                john.txt
        ~~~
    correct_answers:
      - 'git rm --cached maria.txt'
  -
    input_type: select
    allow_many: false
    question:
      text: "Assuming that I have the following output, how do I commit the file `index.html` only?"
      extra_text: |
        ~~~ruby
        On branch master

        Initial commit

        Changes to be committed:
          (use "git rm --cached <file>..." to unstage)

                new file:   index.html
                new file:   foo.txt
                new file:   maria.txt

        Untracked files:
          (use "git add <file>..." to include in what will be committed)

                john.txt
        ~~~
    options:
      - '`git commit index.html`.'
      - '`git commit`.'
      - '`git commit --file index.html`.'
      - 'You cannot commit only the file `index.html`.'
    correct_options:
      - 4
  -
    input_type: select
    allow_many: false
    question:
      text: "Shall I be creating commits without accompanying message?"
    options:
      - 'No, the commit history is much easier to read if each commit has an accompanying message explaining what the commit is about.'
      - 'Yes, each commit can give you the changes and you can inspect the changes in order to find out what the commit is about.'
    correct_options:
      - 1
  -
    input_type: text
    question:
      text: 'Which is the command to create a commit with message "Fixes Error on Sign Up" ?'
    correct_answers:
      - 'git commit -m "Fixes Error on Sign Up"'
  -
    input_type: select
    allow_many: false
    question:
      text: 'What is a Git branch?'
    options:
      - 'It is the differences of two files.'
      - 'It is the branch that we create with an `if` command.'
      - 'It is the output of the git diff command.'
      - 'It is a snapshot of your project files within the committed bucket.'
    correct_options:
      - 4
  -
    input_type: text
    question:
      text: 'What is, usually, the name of the default branch?'
    correct_answers:
      - 'master'
  -
    input_type: text
    question:
      text: 'Which file do we use to record the names of the files or folders that we want to be ignored by Git?'
    correct_answers:
      - '.gitignore'
  -
    input_type: text
    question:
      text: 'Which command lists the commits that we have done so far for the current branch?'
    correct_answers:
      - 'git log'
  -
    input_type: text
    question:
      text: 'Assuming that I have just updated the file "foo.txt" that is already tracked by Git. What command will revert these changes?'
    correct_answers:
      - 'git checkout -- foo.txt'
  -
    input_type: text
    question:
      text: 'Assuming that I have just updated the file "foo.txt" that is already tracked by Git. How do I see the changes that I have done?'
    correct_answers:
      - 'git diff foo.txt'
  -
    input_type: text
    question:
      text: |
        Let's assume that I have just updated the file "foo.txt" that is already tracked by Git. Let's assume also that I have added the file to the staging area.
        How can I see the changes that I am about to commit, for that particular file?
    correct_answers:
      - 'git diff --cached foo.txt'
  -
    input_type: text
    question:
      text: |
        Let's assume that I have just updated the file "foo.txt" that is already tracked by Git. Let's assume also that I have added the
        file to the staging area. How can I put the file back into the modified bucket?
    correct_answers:
      - 'git reset HEAD foo.txt'

